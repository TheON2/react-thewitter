{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  singlePost: null,\n  hasMorePost: true,\n  reTweetLoading: false,\n  reTweetDone: false,\n  reTweetError: null,\n  upLoadImagesLoading: false,\n  upLoadImagesDone: false,\n  upLoadImagesError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadSPostLoading: false,\n  loadSPostDone: false,\n  loadSPostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadUserPostsLoading: false,\n  loadUserPostsDone: false,\n  loadUserPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shordId.generate(),\n  User: {\n    id: shordId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shordId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph()\n  }]\n}));\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_SPOST_REQUEST = 'LOAD_SPOST_REQUEST';\nexport const LOAD_SPOST_SUCCESS = 'LOAD_SPOST_SUCCESS';\nexport const LOAD_SPOST_FAILURE = 'LOAD_SPOST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'TheON2'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shordId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'TheON2'\n  }\n}); // (이전상태,액션) => 다음상태\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case RETWEET_REQUEST:\n      draft.reTweetLoading = true;\n      draft.reTweetDone = false;\n      draft.reTweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      {\n        draft.reTweetLoading = false;\n        draft.reTweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n\n    case RETWEET_FAILURE:\n      draft.reTweetError = action.error;\n      draft.reTweetLoading = false;\n      break;\n\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.upLoadImagesLoading = true;\n      draft.upLoadImagesDone = false;\n      draft.upLoadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.upLoadImagesLoading = false;\n        draft.upLoadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.upLoadImagesError = action.error;\n      draft.upLoadImagesLoading = false;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostError = action.error;\n      draft.likePostLoading = false;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostError = action.error;\n      draft.unlikePostLoading = false;\n      break;\n\n    case LOAD_SPOST_REQUEST:\n      draft.loadSPostLoading = true;\n      draft.loadSPostDone = false;\n      draft.loadSPostError = null;\n      break;\n\n    case LOAD_SPOST_SUCCESS:\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\n      draft.singlePost = action.data;\n      draft.loadSPostLoading = false;\n      draft.loadSPostDone = true;\n      break;\n\n    case LOAD_SPOST_FAILURE:\n      draft.loadSPostError = action.error;\n      draft.loadSPostLoading = false;\n      break;\n\n    case LOAD_USER_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_USER_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.hasMorePost = action.data.length === 10;\n      break;\n\n    case LOAD_USER_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_POST_FAILURE:\n      draft.loadPostError = action.error;\n      draft.loadPostLoading = false;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\n      draft.mainPosts.unshift(action.data);\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostError = action.error;\n      draft.addPostLoading = false;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostError = action.error;\n      draft.removePostLoading = false;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","singlePost","hasMorePost","reTweetLoading","reTweetDone","reTweetError","upLoadImagesLoading","upLoadImagesDone","upLoadImagesError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadSPostLoading","loadSPostDone","loadSPostError","loadPostLoading","loadPostDone","loadPostError","loadUserPostsLoading","loadUserPostsDone","loadUserPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","shordId","generate","User","nickname","faker","name","findName","content","lorem","paragraph","Images","src","image","Comments","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_SPOST_REQUEST","LOAD_SPOST_SUCCESS","LOAD_SPOST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","i","post","find","PostId","Likers","push","UserId","concat","length"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  singlePost: null,\r\n  hasMorePost: true,\r\n  reTweetLoading: false,\r\n  reTweetDone: false,\r\n  reTweetError: null,\r\n  upLoadImagesLoading: false,\r\n  upLoadImagesDone: false,\r\n  upLoadImagesError: null,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  loadSPostLoading: false,\r\n  loadSPostDone: false,\r\n  loadSPostError: null,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  loadUserPostsLoading: false,\r\n  loadUserPostsDone: false,\r\n  loadUserPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n  id: shordId.generate(),\r\n  User: {\r\n    id: shordId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shordId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n  }],\r\n\r\n}));\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_SPOST_REQUEST = 'LOAD_SPOST_REQUEST';\r\nexport const LOAD_SPOST_SUCCESS = 'LOAD_SPOST_SUCCESS';\r\nexport const LOAD_SPOST_FAILURE = 'LOAD_SPOST_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'TheON2',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shordId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'TheON2',\r\n  },\r\n});\r\n\r\n// (이전상태,액션) => 다음상태\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case RETWEET_REQUEST:\r\n      draft.reTweetLoading = true;\r\n      draft.reTweetDone = false;\r\n      draft.reTweetError = null;\r\n      break;\r\n    case RETWEET_SUCCESS: {\r\n      draft.reTweetLoading = false;\r\n      draft.reTweetDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      break;\r\n    }\r\n    case RETWEET_FAILURE:\r\n      draft.reTweetError = action.error;\r\n      draft.reTweetLoading = false;\r\n      break;\r\n    case REMOVE_IMAGE:\r\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.upLoadImagesLoading = true;\r\n      draft.upLoadImagesDone = false;\r\n      draft.upLoadImagesError = null;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS: {\r\n      draft.imagePaths = action.data;\r\n      draft.upLoadImagesLoading = false;\r\n      draft.upLoadImagesDone = true;\r\n      break;\r\n    }\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.upLoadImagesError = action.error;\r\n      draft.upLoadImagesLoading = false;\r\n      break;\r\n    case LIKE_POST_REQUEST:\r\n      draft.likePostLoading = true;\r\n      draft.likePostDone = false;\r\n      draft.likePostError = null;\r\n      break;\r\n    case LIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers.push({ id: action.data.UserId });\r\n      draft.likePostLoading = false;\r\n      draft.likePostDone = true;\r\n      break;\r\n    }\r\n    case LIKE_POST_FAILURE:\r\n      draft.likePostError = action.error;\r\n      draft.likePostLoading = false;\r\n      break;\r\n    case UNLIKE_POST_REQUEST:\r\n      draft.unlikePostLoading = true;\r\n      draft.unlikePostDone = false;\r\n      draft.unlikePostError = null;\r\n      break;\r\n    case UNLIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n      draft.unlikePostLoading = false;\r\n      draft.unlikePostDone = true;\r\n      break;\r\n    }\r\n    case UNLIKE_POST_FAILURE:\r\n      draft.unlikePostError = action.error;\r\n      draft.unlikePostLoading = false;\r\n      break;\r\n    case LOAD_SPOST_REQUEST:\r\n      draft.loadSPostLoading = true;\r\n      draft.loadSPostDone = false;\r\n      draft.loadSPostError = null;\r\n      break;\r\n    case LOAD_SPOST_SUCCESS:\r\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\r\n      draft.singlePost = action.data;\r\n      draft.loadSPostLoading = false;\r\n      draft.loadSPostDone = true;\r\n      break;\r\n    case LOAD_SPOST_FAILURE:\r\n      draft.loadSPostError = action.error;\r\n      draft.loadSPostLoading = false;\r\n      break;\r\n    case LOAD_USER_POSTS_REQUEST:\r\n    case LOAD_HASHTAG_POSTS_REQUEST:\r\n    case LOAD_POST_REQUEST:\r\n      draft.loadPostLoading = true;\r\n      draft.loadPostDone = false;\r\n      draft.loadPostError = null;\r\n      break;\r\n    case LOAD_USER_POSTS_SUCCESS:\r\n    case LOAD_HASHTAG_POSTS_SUCCESS:\r\n    case LOAD_POST_SUCCESS:\r\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\r\n      draft.mainPosts = draft.mainPosts.concat(action.data);\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostDone = true;\r\n      draft.hasMorePost = action.data.length === 10;\r\n      break;\r\n    case LOAD_USER_POSTS_FAILURE:\r\n    case LOAD_HASHTAG_POSTS_FAILURE:\r\n    case LOAD_POST_FAILURE:\r\n      draft.loadPostError = action.error;\r\n      draft.loadPostLoading = false;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\r\n      draft.mainPosts.unshift(action.data);\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.imagePaths = [];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostError = action.error;\r\n      draft.addPostLoading = false;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostError = action.error;\r\n      draft.removePostLoading = false;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}