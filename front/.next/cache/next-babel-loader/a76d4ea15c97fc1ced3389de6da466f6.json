{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  singlePost: null,\n  hasMorePost: true,\n  reTweetLoading: false,\n  reTweetDone: false,\n  reTweetError: null,\n  upLoadImagesLoading: false,\n  upLoadImagesDone: false,\n  upLoadImagesError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadSPostLoading: false,\n  loadSPostDone: false,\n  loadSPostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadUserPostsLoading: false,\n  loadUserPostsDone: false,\n  loadUserPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_SPOST_REQUEST = 'LOAD_SPOST_REQUEST';\nexport const LOAD_SPOST_SUCCESS = 'LOAD_SPOST_SUCCESS';\nexport const LOAD_SPOST_FAILURE = 'LOAD_SPOST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'TheON2'\n  },\n  Images: [],\n  Comments: []\n}); // (이전상태,액션) => 다음상태\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case RETWEET_REQUEST:\n      draft.reTweetLoading = true;\n      draft.reTweetDone = false;\n      draft.reTweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      {\n        draft.reTweetLoading = false;\n        draft.reTweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n\n    case RETWEET_FAILURE:\n      draft.reTweetError = action.error;\n      draft.reTweetLoading = false;\n      break;\n\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.upLoadImagesLoading = true;\n      draft.upLoadImagesDone = false;\n      draft.upLoadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.upLoadImagesLoading = false;\n        draft.upLoadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.upLoadImagesError = action.error;\n      draft.upLoadImagesLoading = false;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostError = action.error;\n      draft.likePostLoading = false;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostError = action.error;\n      draft.unlikePostLoading = false;\n      break;\n\n    case LOAD_SPOST_REQUEST:\n      draft.loadSPostLoading = true;\n      draft.loadSPostDone = false;\n      draft.loadSPostError = null;\n      break;\n\n    case LOAD_SPOST_SUCCESS:\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\n      draft.singlePost = action.data;\n      draft.loadSPostLoading = false;\n      draft.loadSPostDone = true;\n      break;\n\n    case LOAD_SPOST_FAILURE:\n      draft.loadSPostError = action.error;\n      draft.loadSPostLoading = false;\n      break;\n\n    case LOAD_USER_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_USER_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.hasMorePost = action.data.length === 10;\n      break;\n\n    case LOAD_USER_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_POST_FAILURE:\n      draft.loadPostError = action.error;\n      draft.loadPostLoading = false;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\n      draft.mainPosts.unshift(action.data);\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostError = action.error;\n      draft.addPostLoading = false;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostError = action.error;\n      draft.removePostLoading = false;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","singlePost","hasMorePost","reTweetLoading","reTweetDone","reTweetError","upLoadImagesLoading","upLoadImagesDone","upLoadImagesError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadSPostLoading","loadSPostDone","loadSPostError","loadPostLoading","loadPostDone","loadPostError","loadUserPostsLoading","loadUserPostsDone","loadUserPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_SPOST_REQUEST","LOAD_SPOST_SUCCESS","LOAD_SPOST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","dummyPost","id","content","User","nickname","Images","Comments","reducer","state","action","draft","unshift","error","filter","v","i","post","find","PostId","Likers","push","UserId","concat","length"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  singlePost: null,\r\n  hasMorePost: true,\r\n  reTweetLoading: false,\r\n  reTweetDone: false,\r\n  reTweetError: null,\r\n  upLoadImagesLoading: false,\r\n  upLoadImagesDone: false,\r\n  upLoadImagesError: null,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  loadSPostLoading: false,\r\n  loadSPostDone: false,\r\n  loadSPostError: null,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  loadUserPostsLoading: false,\r\n  loadUserPostsDone: false,\r\n  loadUserPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_SPOST_REQUEST = 'LOAD_SPOST_REQUEST';\r\nexport const LOAD_SPOST_SUCCESS = 'LOAD_SPOST_SUCCESS';\r\nexport const LOAD_SPOST_FAILURE = 'LOAD_SPOST_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'TheON2',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\n// (이전상태,액션) => 다음상태\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case RETWEET_REQUEST:\r\n      draft.reTweetLoading = true;\r\n      draft.reTweetDone = false;\r\n      draft.reTweetError = null;\r\n      break;\r\n    case RETWEET_SUCCESS: {\r\n      draft.reTweetLoading = false;\r\n      draft.reTweetDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      break;\r\n    }\r\n    case RETWEET_FAILURE:\r\n      draft.reTweetError = action.error;\r\n      draft.reTweetLoading = false;\r\n      break;\r\n    case REMOVE_IMAGE:\r\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.upLoadImagesLoading = true;\r\n      draft.upLoadImagesDone = false;\r\n      draft.upLoadImagesError = null;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS: {\r\n      draft.imagePaths = action.data;\r\n      draft.upLoadImagesLoading = false;\r\n      draft.upLoadImagesDone = true;\r\n      break;\r\n    }\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.upLoadImagesError = action.error;\r\n      draft.upLoadImagesLoading = false;\r\n      break;\r\n    case LIKE_POST_REQUEST:\r\n      draft.likePostLoading = true;\r\n      draft.likePostDone = false;\r\n      draft.likePostError = null;\r\n      break;\r\n    case LIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers.push({ id: action.data.UserId });\r\n      draft.likePostLoading = false;\r\n      draft.likePostDone = true;\r\n      break;\r\n    }\r\n    case LIKE_POST_FAILURE:\r\n      draft.likePostError = action.error;\r\n      draft.likePostLoading = false;\r\n      break;\r\n    case UNLIKE_POST_REQUEST:\r\n      draft.unlikePostLoading = true;\r\n      draft.unlikePostDone = false;\r\n      draft.unlikePostError = null;\r\n      break;\r\n    case UNLIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n      draft.unlikePostLoading = false;\r\n      draft.unlikePostDone = true;\r\n      break;\r\n    }\r\n    case UNLIKE_POST_FAILURE:\r\n      draft.unlikePostError = action.error;\r\n      draft.unlikePostLoading = false;\r\n      break;\r\n    case LOAD_SPOST_REQUEST:\r\n      draft.loadSPostLoading = true;\r\n      draft.loadSPostDone = false;\r\n      draft.loadSPostError = null;\r\n      break;\r\n    case LOAD_SPOST_SUCCESS:\r\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\r\n      draft.singlePost = action.data;\r\n      draft.loadSPostLoading = false;\r\n      draft.loadSPostDone = true;\r\n      break;\r\n    case LOAD_SPOST_FAILURE:\r\n      draft.loadSPostError = action.error;\r\n      draft.loadSPostLoading = false;\r\n      break;\r\n    case LOAD_USER_POSTS_REQUEST:\r\n    case LOAD_HASHTAG_POSTS_REQUEST:\r\n    case LOAD_POST_REQUEST:\r\n      draft.loadPostLoading = true;\r\n      draft.loadPostDone = false;\r\n      draft.loadPostError = null;\r\n      break;\r\n    case LOAD_USER_POSTS_SUCCESS:\r\n    case LOAD_HASHTAG_POSTS_SUCCESS:\r\n    case LOAD_POST_SUCCESS:\r\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\r\n      draft.mainPosts = draft.mainPosts.concat(action.data);\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostDone = true;\r\n      draft.hasMorePost = action.data.length === 10;\r\n      break;\r\n    case LOAD_USER_POSTS_FAILURE:\r\n    case LOAD_HASHTAG_POSTS_FAILURE:\r\n    case LOAD_POST_FAILURE:\r\n      draft.loadPostError = action.error;\r\n      draft.loadPostLoading = false;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\r\n      draft.mainPosts.unshift(action.data);\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.imagePaths = [];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostError = action.error;\r\n      draft.addPostLoading = false;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostError = action.error;\r\n      draft.removePostLoading = false;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}