{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shordId from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }],\n    Comments: [{\n      id: shordId.generate(),\n      User: {\n        id: shordId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔네요?'\n    }, {\n      User: {\n        id: shordId.generate(),\n        nickname: 'hero'\n      },\n      content: '우와 그렇구나?'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: 1,\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shordId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  }\n}); // (이전상태,액션) => 다음상태\n\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostError: action.error,\n        addPostLoading: false\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/reducers/post.js"],"names":["shordId","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","generate","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","error","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["import shordId from 'shortid';\r\n\r\nexport const initialState = {\r\n  mainPosts: [{\r\n    id: 1,\r\n    User: {\r\n      id: 1,\r\n      nickname: '제로초',\r\n    },\r\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n    Images: [\r\n      { src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726' },\r\n      { src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg' },\r\n      { src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg' },\r\n    ],\r\n    Comments: [\r\n      { id: shordId.generate(),\r\n        User: {\r\n        id: shordId.generate(), nickname: 'nero' },\r\n        content: '우와 개정판이 나왔네요?' },\r\n      { User: { id: shordId.generate(),nickname: 'hero' },\r\n        content: '우와 그렇구나?' },\r\n    ],\r\n  }],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: 1,\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shordId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n});\r\n\r\n// (이전상태,액션) => 다음상태\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        addPostLoading: true,\r\n        addPostDone: false,\r\n        addPostError: null,\r\n      };\r\n    case ADD_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n        addPostLoading: false,\r\n        addPostDone: true,\r\n      };\r\n    case ADD_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        addPostError: action.error,\r\n        addPostLoading: false,\r\n      };\r\n    case ADD_COMMENT_REQUEST:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: true,\r\n        addCommentDone: false,\r\n        addCommentError: null,\r\n      };\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      const post = { ...state.mainPosts[postIndex] };\r\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = post;\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n        addCommentLoading: false,\r\n        addCommentDone: true,\r\n      };\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: false,\r\n        addCommentError: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}