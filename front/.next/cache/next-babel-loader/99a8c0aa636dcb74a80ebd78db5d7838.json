{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`); // delete는 데이터를 가져갈 수 없다 data는 postId\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get('/posts');\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: LIKE_POST_SUCCESS,\n      data: result.data // PostId,UserId\n\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data // PostId,UserId\n\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(2000, LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchLikePost), fork(watchUnLikePost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/sagas/post.js"],"names":["all","call","delay","fork","put","takeLatest","throttle","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","content","addPost","action","result","type","id","err","response","removePostAPI","delete","removePost","loadPostAPI","get","loadPost","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","addCommentAPI","postId","addComment","console","error","watchAddPost","watchRemovePost","watchAddComment","watchLoadPost","watchLikePost","watchUnLikePost","postSaga"],"mappings":"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","sourcesContent":["import { all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS, LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS, UNLIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(`/post/${data}`); // delete는 데이터를 가져갈 수 없다 data는 postId\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI,action.data)\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get('/posts');\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data, // PostId,UserId\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data, // PostId,UserId\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield throttle(2000, LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnLikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPost),\r\n    fork(watchLikePost),\r\n    fork(watchUnLikePost),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}