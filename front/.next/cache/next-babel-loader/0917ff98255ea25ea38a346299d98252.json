{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI,action.data)\n    yield delay(1000);\n    yield put({\n      //put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: 'ADD_POST_SUCCESS' //data:result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","axios","addPostAPI","data","post","addPost","action","type","err","response","watchAddPost","postSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAuBD,IAAvB,CAAP;AACH;;AAED,UAAWE,OAAX,CAAmBC,MAAnB,EAA0B;AACtB,MAAG;AACC;AACA,UAAMT,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AAAC;AACPQ,MAAAA,IAAI,EAAC,kBADC,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOC,GAAP,EAAW;AACT,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAC,kBADC;AAENJ,MAAAA,IAAI,EAACK,GAAG,CAACC,QAAJ,CAAaN;AAFZ,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUO,YAAV,GAAwB;AACpB,QAAMV,UAAU,CAAC,kBAAD,EAAoBK,OAApB,CAAhB;AACH;;AAED,eAAe,UAAUM,QAAV,GAAoB;AAC/B,QAAMf,GAAG,CAAC,CACNE,IAAI,CAACY,YAAD,CADE,CAAD,CAAT;AAIH","sourcesContent":["import {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post',data);\r\n}\r\n\r\nfunction*  addPost(action){\r\n    try{\r\n        //const result = yield call(addPostAPI,action.data)\r\n        yield delay(1000);\r\n        yield put({//put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n            type:'ADD_POST_SUCCESS',\r\n            //data:result.data\r\n        });\r\n    } catch (err){\r\n        yield put({\r\n            type:'ADD_POST_FAILURE',\r\n            data:err.response.data,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest('ADD_POST_REQUEST',addPost);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        ]\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}