{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\react-nodebird\\\\prepare\\\\front\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInView } from 'react-intersection-observer';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POST_REQUEST } from '../reducers/post';\n\nfunction Home() {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostLoading,\n    id\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POST_REQUEST\n    });\n  }, []);\n  const [ref, inView] = useInView();\n  useEffect(() => {\n    if (inView && hasMorePost && !loadPostLoading) {\n      var _mainPosts;\n\n      const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n      dispatch({\n        type: LOAD_POST_REQUEST,\n        lastId\n      });\n    }\n  }, [inView, hasMorePost, loadPostLoading, mainPosts, id]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 14\n    }\n  }), mainPosts.slice(0).reverse().map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 51\n    }\n  })), __jsx(\"div\", {\n    ref: hasMorePost && !loadPostLoading ? ref : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","useInView","AppLayout","PostForm","PostCard","LOAD_POST_REQUEST","Home","dispatch","me","state","user","mainPosts","hasMorePost","loadPostLoading","id","post","type","ref","inView","lastId","length","slice","reverse","map","undefined"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;AAEA,SAASC,IAAT,GAAgB;AACd,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM;AAAES,IAAAA;AAAF,MAASR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,WAAb;AAA0BC,IAAAA,eAA1B;AAA2CC,IAAAA;AAA3C,MAAkDd,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACM,IAAlB,CAAnE;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAM,CAACY,GAAD,EAAMC,MAAN,IAAgBjB,SAAS,EAA/B;AAEAH,EAAAA,SAAS,CACP,MAAM;AACJ,QAAIoB,MAAM,IAAIN,WAAV,IAAyB,CAACC,eAA9B,EAA+C;AAAA;;AAC7C,YAAMM,MAAM,iBAAGR,SAAS,CAACA,SAAS,CAACS,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCN,EAAhD;AACAP,MAAAA,QAAQ,CAAC;AACPS,QAAAA,IAAI,EAAEX,iBADC;AAEPc,QAAAA;AAFO,OAAD,CAAR;AAID;AACF,GATM,EAUP,CAACD,MAAD,EAASN,WAAT,EAAsBC,eAAtB,EAAuCF,SAAvC,EAAkDG,EAAlD,CAVO,CAAT;AAaA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,EAAE,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADT,EAEGG,SAAS,CAACU,KAAV,CAAgB,CAAhB,EAAmBC,OAAnB,GAA6BC,GAA7B,CAAkCR,IAAD,IAAU,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,IAAI,CAACD,EAApB;AAAwB,IAAA,IAAI,EAAEC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA3C,CAFH,EAGE;AAAK,IAAA,GAAG,EAAEH,WAAW,IAAI,CAACC,eAAhB,GAAkCI,GAAlC,GAAwCO,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD;;AAED,eAAelB,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POST_REQUEST } from '../reducers/post';\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost, loadPostLoading, id } = useSelector((state) => state.post);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POST_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  const [ref, inView] = useInView();\r\n\r\n  useEffect(\r\n    () => {\r\n      if (inView && hasMorePost && !loadPostLoading) {\r\n        const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n        dispatch({\r\n          type: LOAD_POST_REQUEST,\r\n          lastId,\r\n        });\r\n      }\r\n    },\r\n    [inView, hasMorePost, loadPostLoading, mainPosts, id],\r\n  );\r\n\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.slice(0).reverse().map((post) => <PostCard key={post.id} post={post} />)}\r\n      <div ref={hasMorePost && !loadPostLoading ? ref : undefined} />\r\n    </AppLayout>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}