{"ast":null,"code":"import shordId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  upLoadImagesLoading: false,\n  upLoadImagesDone: false,\n  upLoadImagesError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shordId.generate(),\n  User: {\n    id: shordId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shordId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph()\n  }]\n}));\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'TheON2'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shordId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'TheON2'\n  }\n}); // (이전상태,액션) => 다음상태\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case UPLOAD_IMAGES_REQUEST:\n      draft.upLoadImagesLoading = true;\n      draft.upLoadImagesDone = false;\n      draft.upLoadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.upLoadImagesLoading = false;\n        draft.upLoadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.upLoadImagesError = action.error;\n      draft.upLoadImagesLoading = false;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostError = action.error;\n      draft.likePostLoading = false;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostError = action.error;\n      draft.unlikePostLoading = false;\n      break;\n\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.hasMorePost = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostError = action.error;\n      draft.loadPostLoading = false;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\n      draft.mainPosts.unshift(action.data);\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostError = action.error;\n      draft.addPostLoading = false;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostError = action.error;\n      draft.removePostLoading = false;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/reducers/post.js"],"names":["shordId","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","upLoadImagesLoading","upLoadImagesDone","upLoadImagesError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostLoading","loadPostDone","loadPostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","post","find","v","PostId","Likers","push","UserId","error","filter","concat","length","unshift"],"mappings":"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","sourcesContent":["import shordId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  upLoadImagesLoading: false,\r\n  upLoadImagesDone: false,\r\n  upLoadImagesError: null,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n  id: shordId.generate(),\r\n  User: {\r\n    id: shordId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shordId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n  }],\r\n\r\n}));\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'TheON2',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shordId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'TheON2',\r\n  },\r\n});\r\n\r\n// (이전상태,액션) => 다음상태\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.upLoadImagesLoading = true;\r\n      draft.upLoadImagesDone = false;\r\n      draft.upLoadImagesError = null;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers.push({ id: action.data.UserId });\r\n      draft.upLoadImagesLoading = false;\r\n      draft.upLoadImagesDone = true;\r\n      break;\r\n    }\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.upLoadImagesError = action.error;\r\n      draft.upLoadImagesLoading = false;\r\n      break;\r\n    case LIKE_POST_REQUEST:\r\n      draft.likePostLoading = true;\r\n      draft.likePostDone = false;\r\n      draft.likePostError = null;\r\n      break;\r\n    case LIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers.push({ id: action.data.UserId });\r\n      draft.likePostLoading = false;\r\n      draft.likePostDone = true;\r\n      break;\r\n    }\r\n    case LIKE_POST_FAILURE:\r\n      draft.likePostError = action.error;\r\n      draft.likePostLoading = false;\r\n      break;\r\n    case UNLIKE_POST_REQUEST:\r\n      draft.unlikePostLoading = true;\r\n      draft.unlikePostDone = false;\r\n      draft.unlikePostError = null;\r\n      break;\r\n    case UNLIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n      draft.unlikePostLoading = false;\r\n      draft.unlikePostDone = true;\r\n      break;\r\n    }\r\n    case UNLIKE_POST_FAILURE:\r\n      draft.unlikePostError = action.error;\r\n      draft.unlikePostLoading = false;\r\n      break;\r\n    case LOAD_POST_REQUEST:\r\n      draft.loadPostLoading = true;\r\n      draft.loadPostDone = false;\r\n      draft.loadPostError = null;\r\n      break;\r\n    case LOAD_POST_SUCCESS:\r\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\r\n      draft.mainPosts = action.data.concat(draft.mainPosts);\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostDone = true;\r\n      draft.hasMorePost = draft.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POST_FAILURE:\r\n      draft.loadPostError = action.error;\r\n      draft.loadPostLoading = false;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\r\n      draft.mainPosts.unshift(action.data);\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostError = action.error;\r\n      draft.addPostLoading = false;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostError = action.error;\r\n      draft.removePostLoading = false;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}