{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            //put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: 'ADD_POST_SUCCESS' //data:result.data\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'ADD_POST_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","delay","fork","put","takeLatest","axios","addPostAPI","data","post","action","type","response"],"mappings":";;oDAOWA,O;qDAiBDC,Y;qDAIeC,Q;;AA5BzB,SAAQC,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAuBD,IAAvB,CAAP;AACH;;AAED,SAAWV,OAAX,CAAmBY,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMR,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAME,GAAG,CAAC;AAAC;AACPO,YAAAA,IAAI,EAAC,kBADC,CAEN;;AAFM,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMP,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAC,kBADC;AAENH,YAAAA,IAAI,EAAC,YAAII,QAAJ,CAAaJ;AAFZ,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUT,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAAC,kBAAD,EAAoBP,OAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACJ,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post',data);\r\n}\r\n\r\nfunction*  addPost(action){\r\n    try{\r\n        //const result = yield call(addPostAPI,action.data)\r\n        yield delay(1000);\r\n        yield put({//put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n            type:'ADD_POST_SUCCESS',\r\n            //data:result.data\r\n        });\r\n    } catch (err){\r\n        yield put({\r\n            type:'ADD_POST_FAILURE',\r\n            data:err.response.data,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest('ADD_POST_REQUEST',addPost);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        ]\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}