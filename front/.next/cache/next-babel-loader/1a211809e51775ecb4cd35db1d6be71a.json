{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\react-nodebird\\\\prepare\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport FollowButton from './FollowButton';\n\nfunction PostCard({\n  post\n}) {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const liked = post.Likers.find(v => v.id === id);\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, [id]);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  });\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 34\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnlike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 23\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 23\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }))],\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 22\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 24\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  })), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }\n      }, item.User.nickname[0]),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  })));\n}\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    UserId: PropTypes.number,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","Button","Card","Popover","Avatar","List","Comment","EllipsisOutlined","HeartOutlined","HeartTwoTone","MessageOutlined","RetweetOutlined","useDispatch","useSelector","PropTypes","PostImages","CommentForm","PostCardContent","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","PostCard","post","dispatch","removePostLoading","retweetError","state","commentFormOpened","setCommentFormOpened","id","user","me","liked","Likers","find","v","alert","onLike","type","data","onUnlike","onToggleComment","prev","onRemovePost","onRetweet","marginBottom","Images","User","nickname","content","Comments","length","item","propTypes","shape","number","object","UserId","string","createdAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\r\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PropTypes } from 'prop-types';\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport FollowButton from './FollowButton';\r\n\r\nfunction PostCard({ post }) {\r\n  const dispatch = useDispatch();\r\n  const { removePostLoading, retweetError } = useSelector((state) => state.post);\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  const liked = post.Likers.find((v) => v.id === id);\r\n\r\n  useEffect(() => {\r\n    if (retweetError) {\r\n       alert(retweetError);\r\n    }\r\n  }, [retweetError]);\r\n\r\n  const onLike = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: LIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const onUnlike = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: UNLIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened((prev) => !prev);\r\n  }, [id]);\r\n\r\n  const onRemovePost = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  });\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  return (\r\n    <div style={{ marginBottom: 20 }}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n          liked\r\n            ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\r\n            : <HeartOutlined key=\"heart\" onClick={onLike} />,\r\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"more\"\r\n            content={(\r\n              <Button.Group>\r\n                {id && post.User.id === id\r\n                  ? (\r\n                    <>\r\n                      <Button>수정</Button>\r\n                      <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                    </>\r\n                  )\r\n                  : <Button>신고</Button>}\r\n              </Button.Group>\r\n                    )}\r\n          >\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        extra={id && <FollowButton post={post} />}\r\n      >\r\n        <Card.Meta\r\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n          title={post.User.nickname}\r\n          description={<PostCardContent postData={post.content} />}\r\n        />\r\n\r\n      </Card>\r\n      {commentFormOpened && (\r\n      <div>\r\n        <CommentForm post={post} />\r\n        <List\r\n          header={`${post.Comments.length}개의 댓글`}\r\n          itemLayout=\"horizontal\"\r\n          dataSource={post.Comments}\r\n          renderItem={(item) => (\r\n            <li>\r\n              <Comment\r\n                author={item.User.nickname}\r\n                avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                content={item.content}\r\n              />\r\n            </li>\r\n          )}\r\n        />\r\n      </div>\r\n      )}\r\n      {/* <CommentForm/> */}\r\n      {/* <Comments/> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    UserId: PropTypes.number,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n    Likers: PropTypes.arrayOf(PropTypes.object),\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}