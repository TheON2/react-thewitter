{"ast":null,"code":"import shordId from 'shortid';\nimport produce from 'immer';\nimport faker from \"faker\";\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shordId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shordId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shordId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }],\n    Comments: [{\n      id: shordId.generate(),\n      User: {\n        id: shordId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔네요?'\n    }, {\n      id: shordId.generate(),\n      User: {\n        id: shordId.generate(),\n        nickname: 'hero'\n      },\n      content: '우와 그렇구나?'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(() => ({\n  id: shordId.generate(),\n  User: {\n    id: shordId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.imageUrl()\n  }],\n  Comments: [{\n    User: {\n      id: shordId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph()\n  }]\n})));\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shordId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  }\n}); // (이전상태,액션) => 다음상태\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\n      draft.mainPosts.unshift(dummyPost(action.data));\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostError = action.error;\n      draft.addPostLoading = true;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostError = action.error;\n      draft.removePostLoading = false;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/reducers/post.js"],"names":["shordId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","name","findName","lorem","paragraph","image","imageUrl","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shordId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from \"faker\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [{\r\n    id: 1,\r\n    User: {\r\n      id: 1,\r\n      nickname: '제로초',\r\n    },\r\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n    Images: [\r\n      { id: shordId.generate(), src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726' },\r\n      { id: shordId.generate(), src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg' },\r\n      { id: shordId.generate(), src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg' },\r\n    ],\r\n    Comments: [\r\n      { id: shordId.generate(),\r\n        User: { id: shordId.generate(), nickname: 'nero' },\r\n        content: '우와 개정판이 나왔네요?' },\r\n      { id: shordId.generate(),\r\n        User: { id: shordId.generate(), nickname: 'hero' },\r\n        content: '우와 그렇구나?' },\r\n    ],\r\n  }],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(() => ({\r\n  id: shordId.generate(),\r\n  User: {\r\n    id: shordId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.imageUrl(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shordId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n  }],\r\n\r\n})));\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shordId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n});\r\n\r\n// (이전상태,액션) => 다음상태\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\r\n      draft.mainPosts.unshift(dummyPost(action.data));\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostError = action.error;\r\n      draft.addPostLoading = true;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostError = action.error;\r\n      draft.removePostLoading = false;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n      post.Comments.unshift(dummyComment(action.data.content));\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}