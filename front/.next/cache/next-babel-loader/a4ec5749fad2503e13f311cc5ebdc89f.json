{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    //const result = yield call(logInAPI,action.data)\n    yield delay(1000);\n    yield put({\n      //put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI(data) {\n  return axios.post('/api/logout', data);\n}\n\nfunction* logOut(action) {\n  try {\n    //const result = yield call(logOutAPI,action.data)\n    yield delay(1000);\n    yield put({\n      //put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: LOG_OUT_SUCCESS //data:result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/sagas/user.js"],"names":["axios","all","delay","fork","put","takeLatest","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","logInAPI","data","post","logIn","action","type","err","error","response","logOutAPI","logOut","watchLogin","watchLogOut","userSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,eANJ,QAOO,kBAPP;;AASA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOb,KAAK,CAACc,IAAN,CAAW,YAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACC;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AAAC;AACPa,MAAAA,IAAI,EAACT,cADC;AAENK,MAAAA,IAAI,EAACG,MAAM,CAACH;AAFN,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOK,GAAP,EAAW;AACT,UAAMd,GAAG,CAAC;AACNa,MAAAA,IAAI,EAACX,cADC;AAENa,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,SAASQ,SAAT,CAAmBR,IAAnB,EAAwB;AACpB,SAAOb,KAAK,CAACc,IAAN,CAAW,aAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUS,MAAV,CAAiBN,MAAjB,EAAwB;AACpB,MAAG;AACC;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AAAC;AACPa,MAAAA,IAAI,EAACN,eADC,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOO,GAAP,EAAW;AACT,UAAMd,GAAG,CAAC;AACNa,MAAAA,IAAI,EAACR,eADC;AAENU,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUU,UAAV,GAAsB;AAClB,QAAMlB,UAAU,CAACE,cAAD,EAAgBQ,KAAhB,CAAhB;AACH;;AAED,UAAUS,WAAV,GAAuB;AACnB,QAAMnB,UAAU,CAACK,eAAD,EAAiBY,MAAjB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAoB;AAC/B,QAAMxB,GAAG,CAAC,CACNE,IAAI,CAACoB,UAAD,CADE,EAENpB,IAAI,CAACqB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import axios from \"axios\";\r\nimport {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport {\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS\r\n} from \"../reducers/user\";\r\n\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login',data);\r\n}\r\n\r\nfunction* logIn(action){\r\n    try{\r\n        //const result = yield call(logInAPI,action.data)\r\n        yield delay(1000);\r\n        yield put({//put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n            type:LOG_IN_SUCCESS,\r\n            data:action.data\r\n        });\r\n    } catch (err){\r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n            error:err.response.data,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction logOutAPI(data){\r\n    return axios.post('/api/logout',data);\r\n}\r\n\r\nfunction* logOut(action){\r\n    try{\r\n        //const result = yield call(logOutAPI,action.data)\r\n        yield delay(1000);\r\n        yield put({//put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n            type:LOG_OUT_SUCCESS,\r\n            //data:result.data\r\n        });\r\n    } catch (err){\r\n        yield put({\r\n            type:LOG_OUT_FAILURE,\r\n            error:err.response.data,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeLatest(LOG_IN_REQUEST,logIn);\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield takeLatest(LOG_OUT_REQUEST,logOut);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}