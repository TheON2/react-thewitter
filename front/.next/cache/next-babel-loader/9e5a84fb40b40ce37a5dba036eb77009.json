{"ast":null,"code":"import shordId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  reTweetLoading: false,\n  reTweetDone: false,\n  reTweetError: null,\n  upLoadImagesLoading: false,\n  upLoadImagesDone: false,\n  upLoadImagesError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shordId.generate(),\n  User: {\n    id: shordId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shordId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph()\n  }]\n}));\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'TheON2'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shordId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'TheON2'\n  }\n}); // (이전상태,액션) => 다음상태\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.upLoadImagesLoading = true;\n      draft.upLoadImagesDone = false;\n      draft.upLoadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.upLoadImagesLoading = false;\n        draft.upLoadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.upLoadImagesError = action.error;\n      draft.upLoadImagesLoading = false;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostError = action.error;\n      draft.likePostLoading = false;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostError = action.error;\n      draft.unlikePostLoading = false;\n      break;\n\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.hasMorePost = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostError = action.error;\n      draft.loadPostLoading = false;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\n      draft.mainPosts.unshift(action.data);\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostError = action.error;\n      draft.addPostLoading = false;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostError = action.error;\n      draft.removePostLoading = false;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/reducers/post.js"],"names":["shordId","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","reTweetLoading","reTweetDone","reTweetError","upLoadImagesLoading","upLoadImagesDone","upLoadImagesError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostLoading","loadPostDone","loadPostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","filter","v","i","error","post","find","PostId","Likers","push","UserId","concat","length","unshift"],"mappings":"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","sourcesContent":["import shordId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  reTweetLoading: false,\r\n  reTweetDone: false,\r\n  reTweetError: null,\r\n  upLoadImagesLoading: false,\r\n  upLoadImagesDone: false,\r\n  upLoadImagesError: null,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n  id: shordId.generate(),\r\n  User: {\r\n    id: shordId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shordId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n  }],\r\n\r\n}));\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'TheON2',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shordId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'TheON2',\r\n  },\r\n});\r\n\r\n// (이전상태,액션) => 다음상태\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case REMOVE_IMAGE:\r\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.upLoadImagesLoading = true;\r\n      draft.upLoadImagesDone = false;\r\n      draft.upLoadImagesError = null;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS: {\r\n      draft.imagePaths = action.data;\r\n      draft.upLoadImagesLoading = false;\r\n      draft.upLoadImagesDone = true;\r\n      break;\r\n    }\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.upLoadImagesError = action.error;\r\n      draft.upLoadImagesLoading = false;\r\n      break;\r\n    case LIKE_POST_REQUEST:\r\n      draft.likePostLoading = true;\r\n      draft.likePostDone = false;\r\n      draft.likePostError = null;\r\n      break;\r\n    case LIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers.push({ id: action.data.UserId });\r\n      draft.likePostLoading = false;\r\n      draft.likePostDone = true;\r\n      break;\r\n    }\r\n    case LIKE_POST_FAILURE:\r\n      draft.likePostError = action.error;\r\n      draft.likePostLoading = false;\r\n      break;\r\n    case UNLIKE_POST_REQUEST:\r\n      draft.unlikePostLoading = true;\r\n      draft.unlikePostDone = false;\r\n      draft.unlikePostError = null;\r\n      break;\r\n    case UNLIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n      draft.unlikePostLoading = false;\r\n      draft.unlikePostDone = true;\r\n      break;\r\n    }\r\n    case UNLIKE_POST_FAILURE:\r\n      draft.unlikePostError = action.error;\r\n      draft.unlikePostLoading = false;\r\n      break;\r\n    case LOAD_POST_REQUEST:\r\n      draft.loadPostLoading = true;\r\n      draft.loadPostDone = false;\r\n      draft.loadPostError = null;\r\n      break;\r\n    case LOAD_POST_SUCCESS:\r\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\r\n      draft.mainPosts = action.data.concat(draft.mainPosts);\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostDone = true;\r\n      draft.hasMorePost = draft.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POST_FAILURE:\r\n      draft.loadPostError = action.error;\r\n      draft.loadPostLoading = false;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      // draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\r\n      draft.mainPosts.unshift(action.data);\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.imagePaths = [];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostError = action.error;\r\n      draft.addPostLoading = false;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostError = action.error;\r\n      draft.removePostLoading = false;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}