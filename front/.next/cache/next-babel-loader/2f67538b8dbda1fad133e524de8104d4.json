{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from \"../reducers/post\";\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI,action.data)\n    yield delay(1000);\n    yield put({\n      //put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: ADD_POST_SUCCESS //data:result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addCommentAPI,action.data)\n    yield delay(1000);\n    yield put({\n      //put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: ADD_COMMENT_SUCCESS //data:result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","addPostAPI","data","post","addPost","action","type","err","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,mBADJ,EACyBC,mBADzB,EAEIC,mBAFJ,EAGIC,gBAHJ,EAIIC,gBAJJ,EAKIC,gBALJ,QAMO,kBANP;;AAQA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOR,KAAK,CAACS,IAAN,CAAW,WAAX,EAAuBD,IAAvB,CAAP;AACH;;AAED,UAAWE,OAAX,CAAmBC,MAAnB,EAA0B;AACtB,MAAG;AACC;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AAAC;AACPc,MAAAA,IAAI,EAACN,gBADC,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOO,GAAP,EAAW;AACT,UAAMf,GAAG,CAAC;AACNc,MAAAA,IAAI,EAACR,gBADC;AAENI,MAAAA,IAAI,EAACK,GAAG,CAACC,QAAJ,CAAaN;AAFZ,KAAD,CAAT;AAIH;AAEJ;;AAED,SAASO,aAAT,CAAuBP,IAAvB,EAA4B;AACxB,SAAOR,KAAK,CAACS,IAAN,CAAY,QAAOD,IAAI,CAACQ,MAAO,UAA/B,EAAyCR,IAAzC,CAAP;AACH;;AAED,UAAWS,UAAX,CAAsBN,MAAtB,EAA6B;AACzB,MAAG;AACC;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AAAC;AACPc,MAAAA,IAAI,EAACT,mBADC,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOU,GAAP,EAAW;AACT,UAAMf,GAAG,CAAC;AACNc,MAAAA,IAAI,EAACX,mBADC;AAENO,MAAAA,IAAI,EAACK,GAAG,CAACC,QAAJ,CAAaN;AAFZ,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUU,YAAV,GAAwB;AACpB,QAAMnB,UAAU,CAACM,gBAAD,EAAkBK,OAAlB,CAAhB;AACH;;AACD,UAAUS,eAAV,GAA2B;AACvB,QAAMpB,UAAU,CAACG,mBAAD,EAAqBQ,OAArB,CAAhB;AACH;;AAED,eAAe,UAAUU,QAAV,GAAoB;AAC/B,QAAMzB,GAAG,CAAC,CACNE,IAAI,CAACqB,YAAD,CADE,EAENrB,IAAI,CAACsB,eAAD,CAFE,CAAD,CAAT;AAKH","sourcesContent":["import {all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS\r\n} from \"../reducers/post\";\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post',data);\r\n}\r\n\r\nfunction*  addPost(action){\r\n    try{\r\n        //const result = yield call(addPostAPI,action.data)\r\n        yield delay(1000);\r\n        yield put({//put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n            type:ADD_POST_SUCCESS,\r\n            //data:result.data\r\n        });\r\n    } catch (err){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/api/${data.postId}/comment`,data);\r\n}\r\n\r\nfunction*  addComment(action){\r\n    try{\r\n        //const result = yield call(addCommentAPI,action.data)\r\n        yield delay(1000);\r\n        yield put({//put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n            type:ADD_COMMENT_SUCCESS,\r\n            //data:result.data\r\n        });\r\n    } catch (err){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addPost);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        ]\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}