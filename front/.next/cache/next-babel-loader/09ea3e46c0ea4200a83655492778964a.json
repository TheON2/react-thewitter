{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnLikePost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, UNLIKE_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"]('/api/post', data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction loadPostAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadPostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOAD_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return throttle(2000, LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return throttle(2000, LIKE_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchUnLikePost() {\n  return _regeneratorRuntime.wrap(function watchUnLikePost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return throttle(2000, UNLIKE_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPost), fork(watchLikePost), fork(watchUnLikePost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/sagas/post.js"],"names":["addPost","removePost","loadPost","addComment","watchAddPost","watchRemovePost","watchAddComment","watchLoadPost","watchLikePost","watchUnLikePost","postSaga","all","call","delay","fork","put","takeLatest","throttle","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_REQUEST","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","UNLIKE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","content","action","result","type","id","response","removePostAPI","loadPostAPI","get","addCommentAPI","postId","console","error"],"mappings":";;oDAsBUA,O;qDAuBAC,U;qDAwBAC,Q;qDAmBAC,U;qDAiBAC,Y;qDAGAC,e;qDAGAC,e;qDAGAC,a;qDAGAC,a;sDAGAC,e;sDAIeC,Q;;AA5HzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,EAAkDC,QAAlD,QAAkE,oBAAlE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,gBANF,EAMoBC,iBANpB,EAOEC,iBAPF,EAQEC,iBARF,EASEC,iBATF,EAUEC,mBAVF,EAWEC,mBAXF,EAYEC,mBAZF,EAYuBC,mBAZvB,QAaO,kBAbP;AAcA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOlB,KAAK,CAACmB,IAAN,CAAW,OAAX,EAAoB;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GAApB,CAAP;AACD;;AAED,SAAUpC,OAAV,CAAkBuC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAM3B,IAAI,CAACuB,UAAD,EAAaI,MAAM,CAACH,IAApB,CAAV;;AAFnB;AAEUI,UAAAA,MAFV;AAAA;AAGI,iBAAMzB,GAAG,CAAC;AAAE;AACV0B,YAAAA,IAAI,EAAEjB,gBADE;AAERY,YAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAOI,iBAAMrB,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAER,cADE;AAERG,YAAAA,IAAI,EAAEI,MAAM,CAACJ,IAAP,CAAYM;AAFV,WAAD,CAAT;;AAPJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYI,iBAAM3B,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEnB,gBADE;AAERc,YAAAA,IAAI,EAAE,YAAIO,QAAJ,CAAaP;AAFX,WAAD,CAAT;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAASQ,aAAT,CAAuBR,IAAvB,EAA6B;AAC3B,SAAOlB,KAAK,UAAL,CAAa,WAAb,EAA0BkB,IAA1B,CAAP;AACD;;AAED,SAAUnC,UAAV,CAAqBsC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAM1B,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAME,GAAG,CAAC;AAAE;AACV0B,YAAAA,IAAI,EAAEV,mBADE;AAERK,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAQI,iBAAMrB,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEP,iBADE;AAERE,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AARJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaI,iBAAMrB,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEZ,mBADE;AAERO,YAAAA,IAAI,EAAE,aAAIO,QAAJ,CAAaP;AAFX,WAAD,CAAT;;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAASS,WAAT,CAAqBT,IAArB,EAA2B;AACzB,SAAOlB,KAAK,CAAC4B,GAAN,CAAU,QAAV,EAAoBV,IAApB,CAAP;AACD;;AAED,SAAUlC,QAAV,CAAmBqC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAM3B,IAAI,CAACiC,WAAD,EAAcN,MAAM,CAACH,IAArB,CAAV;;AAFnB;AAEUI,UAAAA,MAFV;AAAA;AAGI,iBAAMzB,GAAG,CAAC;AAAE;AACV0B,YAAAA,IAAI,EAAEb,iBADE;AAERQ,YAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMrB,GAAG,CAAC;AACR0B,YAAAA,IAAI,EAAEf,iBADE;AAERU,YAAAA,IAAI,EAAE,aAAIO,QAAJ,CAAaP;AAFX,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAASW,aAAT,CAAuBX,IAAvB,EAA6B;AAC3B,SAAOlB,KAAK,CAACmB,IAAN,iBAAoBD,IAAI,CAACY,MAAzB,eAA2CZ,IAA3C,CAAP;AACD;;AAED,SAAUjC,UAAV,CAAqBoC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAM3B,IAAI,CAACmC,aAAD,EAAgBR,MAAM,CAACH,IAAvB,CAAV;;AAFnB;AAEUI,UAAAA,MAFV;AAAA;AAGI,iBAAMzB,GAAG,CAAC;AAAE;AACV0B,YAAAA,IAAI,EAAEpB,mBADE;AAERe,YAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIa,UAAAA,OAAO,CAACC,KAAR;AARJ;AASI,iBAAMnC,GAAG,CAAC;AAER0B,YAAAA,IAAI,EAAEtB,mBAFE;AAGRiB,YAAAA,IAAI,EAAE,aAAIO,QAAJ,CAAaP;AAHX,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUhC,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMY,UAAU,CAACO,gBAAD,EAAmBvB,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUK,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMW,UAAU,CAACc,mBAAD,EAAsB7B,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUK,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMU,UAAU,CAACI,mBAAD,EAAsBjB,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUI,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMU,QAAQ,CAAC,IAAD,EAAOU,iBAAP,EAA0BzB,QAA1B,CAAd;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUM,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMS,QAAQ,CAAC,IAAD,EAAOQ,iBAAP,EAA0BvB,QAA1B,CAAd;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUO,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,QAAQ,CAAC,IAAD,EAAOe,mBAAP,EAA4B9B,QAA5B,CAAd;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUQ,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRG,IAAI,CAACV,YAAD,CADI,EAERU,IAAI,CAACP,aAAD,CAFI,EAGRO,IAAI,CAACN,aAAD,CAHI,EAIRM,IAAI,CAACL,eAAD,CAJI,EAKRK,IAAI,CAACT,eAAD,CALI,EAMRS,IAAI,CAACR,eAAD,CANI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS, LIKE_POST_REQUEST,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS, UNLIKE_POST_REQUEST,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI,action.data)\r\n    yield delay(1000);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get('/posts', data);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchLoadPost() {\r\n  yield throttle(2000, LOAD_POST_REQUEST, loadPost);\r\n}\r\nfunction* watchLikePost() {\r\n  yield throttle(2000, LIKE_POST_REQUEST, loadPost);\r\n}\r\nfunction* watchUnLikePost() {\r\n  yield throttle(2000, UNLIKE_POST_REQUEST, loadPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPost),\r\n    fork(watchLikePost),\r\n    fork(watchUnLikePost),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}