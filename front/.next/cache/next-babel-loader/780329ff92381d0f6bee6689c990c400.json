{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shordId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI,action.data)\n    yield delay(1000);\n    const id = shordId.generate();\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        data: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI,action.data)\n    yield delay(1000);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","axios","shordId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","addPostAPI","data","post","addPost","action","id","generate","type","err","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SACEC,mBADF,EACuBC,mBADvB,EAEEC,mBAFF,EAGEC,gBAHF,EAIEC,gBAJF,EAKEC,gBALF,QAMO,kBANP;AAOA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOV,KAAK,CAACW,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMkB,EAAE,GAAGb,OAAO,CAACc,QAAR,EAAX;AACA,UAAMjB,GAAG,CAAC;AAAE;AACVkB,MAAAA,IAAI,EAAET,gBADE;AAERG,MAAAA,IAAI,EAAC;AAACI,QAAAA,EAAD;AAAKJ,QAAAA,IAAI,EAACG,MAAM,CAACH;AAAjB;AAFG,KAAD,CAAT;AAIA,UAAMZ,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAER,cADE;AAERE,MAAAA,IAAI,EAAEI;AAFE,KAAD,CAAT;AAID,GAZD,CAYE,OAAOG,GAAP,EAAY;AACZ,UAAMnB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEX,gBADE;AAERK,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASS,aAAT,CAAuBT,IAAvB,EAA6B;AAC3B,SAAOV,KAAK,CAACW,IAAN,CAAY,QAAOD,IAAI,CAACU,MAAO,UAA/B,EAA0CV,IAA1C,CAAP;AACD;;AAED,UAAUW,UAAV,CAAqBR,MAArB,EAA6B;AAC3B,MAAI;AACF;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AAAE;AACVkB,MAAAA,IAAI,EAAEZ,mBADE;AAERM,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOO,GAAP,EAAY;AACZ,UAAMnB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEd,mBADE;AAERQ,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUY,YAAV,GAAyB;AACvB,QAAMvB,UAAU,CAACO,gBAAD,EAAmBM,OAAnB,CAAhB;AACD;;AACD,UAAUW,eAAV,GAA4B;AAC1B,QAAMxB,UAAU,CAACI,mBAAD,EAAsBkB,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAM7B,GAAG,CAAC,CACRE,IAAI,CAACyB,YAAD,CADI,EAERzB,IAAI,CAAC0B,eAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport shordId from 'shortid';\r\nimport {\r\n  ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI,action.data)\r\n    yield delay(1000);\r\n    const id = shordId.generate();\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: ADD_POST_SUCCESS,\r\n      data:{id, data:action.data},\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI,action.data)\r\n    yield delay(1000);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 비슷하게 본다\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}