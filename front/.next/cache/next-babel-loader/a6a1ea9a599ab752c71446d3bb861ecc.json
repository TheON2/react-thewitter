{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\";\nconst initialState = {\n  user: {},\n  post: {}\n};\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  };\n}; //(이전상태,액션) => 다음상태\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      case 'LOG_IN':\n        return _objectSpread(_objectSpread({}, state), {}, {\n          user: _objectSpread(_objectSpread({}, state.user), {}, {\n            isLoggedIn: true,\n            user: action.data\n          })\n        });\n\n      case 'LOG_OUT':\n        return _objectSpread(_objectSpread({}, state), {}, {\n          user: _objectSpread(_objectSpread({}, state.user), {}, {\n            isLoggedIn: false,\n            user: null\n          })\n        });\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","initialState","loginAction","data","type","logoutAction","rootReducer","index","state","action","console","log","payload","isLoggedIn"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AACA,SAAQC,eAAR,QAA8B,OAA9B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,YAAY,GAAC;AACfF,EAAAA,IAAI,EAAC,EADU;AAIfC,EAAAA,IAAI,EAAC;AAJU,CAAnB;AASA,OAAO,MAAME,WAAW,GAAIC,IAAD,IAAQ;AAC/B,SAAM;AACFC,IAAAA,IAAI,EAAC,QADH;AAEFD,IAAAA;AAFE,GAAN;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAI;AAC5B,SAAM;AACFD,IAAAA,IAAI,EAAC;AADH,GAAN;AAGH,CAJM,C,CAMP;;AACA,MAAME,WAAW,GAAGR,eAAe,CAAC;AAChCS,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAYC,MAAZ,KAAqB;AAC5B,YAAQA,MAAM,CAACL,IAAf;AACI,WAAKP,OAAL;AACIa,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACA,+CACOD,KADP,GACiBC,MAAM,CAACG,OADxB;;AAGJ,WAAK,QAAL;AACI,+CACOJ,KADP;AAEIT,UAAAA,IAAI,kCACGS,KAAK,CAACT,IADT;AAEAc,YAAAA,UAAU,EAAE,IAFZ;AAGAd,YAAAA,IAAI,EAAEU,MAAM,CAACN;AAHb;AAFR;;AAQJ,WAAK,SAAL;AACI,+CACOK,KADP;AAEIT,UAAAA,IAAI,kCACGS,KAAK,CAACT,IADT;AAEAc,YAAAA,UAAU,EAAE,KAFZ;AAGAd,YAAAA,IAAI,EAAE;AAHN;AAFR;;AAQJ;AACI,eAAOS,KAAP;AAzBR;AA2BC,GA7B+B;AA8B5BT,EAAAA,IA9B4B;AA+BxBC,EAAAA;AA/BwB,CAAD,CAAnC;AAkCA,eAAeM,WAAf","sourcesContent":["import {HYDRATE} from \"next-redux-wrapper\";\r\nimport {combineReducers} from \"redux\";\r\nimport user from \"./user\";\r\nimport post from \"./post\";\r\n\r\nconst initialState={\r\n    user:{\r\n\r\n    },\r\n    post:{\r\n\r\n    }\r\n}\r\n\r\nexport const loginAction = (data)=>{\r\n    return{\r\n        type:'LOG_IN',\r\n        data,\r\n    }\r\n}\r\n\r\nexport const logoutAction = ()=>{\r\n    return{\r\n        type:'LOG_OUT',\r\n    }\r\n}\r\n\r\n//(이전상태,액션) => 다음상태\r\nconst rootReducer = combineReducers({\r\n    index: (state = {},action)=>{\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            console.log('HYDRATE', action);\r\n            return {\r\n                ...state, ...action.payload\r\n            };\r\n        case 'LOG_IN':\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user,\r\n                    isLoggedIn: true,\r\n                    user: action.data\r\n                }\r\n            }\r\n        case 'LOG_OUT':\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user,\r\n                    isLoggedIn: false,\r\n                    user: null\r\n                }\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n    },\r\n        user,\r\n            post,\r\n});\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}