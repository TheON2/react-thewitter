{"ast":null,"code":"import axios from 'axios';\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI,action.data)\n    yield delay(1000);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI(data) {\n  return axios.post('/api/logout', data);\n}\n\nfunction* logOut(action) {\n  try {\n    // const result = yield call(logOutAPI,action.data)\n    yield delay(1000);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: LOG_OUT_SUCCESS // data:result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction SignUpAPI(data) {\n  return axios.post('/api/signup', data);\n}\n\nfunction* signUp(action) {\n  try {\n    // const result = yield call(logOutAPI,action.data)\n    yield delay(1000);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: SIGN_UP_SUCCESS // data:result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/study/react-nodebird/prepare/front/sagas/user.js"],"names":["axios","all","delay","fork","put","takeLatest","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","logInAPI","data","post","logIn","action","type","err","error","response","logOutAPI","logOut","SignUpAPI","signUp","watchLogin","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,EAMmBC,eANnB,EAMoCC,eANpC,EAMqDC,eANrD,QAOO,kBAPP;;AASA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOhB,KAAK,CAACiB,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AAAE;AACVgB,MAAAA,IAAI,EAAEZ,cADE;AAERQ,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOK,GAAP,EAAY;AACZ,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEd,cADE;AAERgB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASQ,SAAT,CAAmBR,IAAnB,EAAyB;AACvB,SAAOhB,KAAK,CAACiB,IAAN,CAAW,aAAX,EAA0BD,IAA1B,CAAP;AACD;;AAED,UAAUS,MAAV,CAAiBN,MAAjB,EAAyB;AACvB,MAAI;AACF;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AAAE;AACVgB,MAAAA,IAAI,EAAET,eADE,CAER;;AAFQ,KAAD,CAAT;AAID,GAPD,CAOE,OAAOU,GAAP,EAAY;AACZ,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEX,eADE;AAERa,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASU,SAAT,CAAmBV,IAAnB,EAAyB;AACvB,SAAOhB,KAAK,CAACiB,IAAN,CAAW,aAAX,EAA0BD,IAA1B,CAAP;AACD;;AAED,UAAUW,MAAV,CAAiBR,MAAjB,EAAyB;AACvB,MAAI;AACF;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AAAE;AACVgB,MAAAA,IAAI,EAAEN,eADE,CAER;;AAFQ,KAAD,CAAT;AAID,GAPD,CAOE,OAAOO,GAAP,EAAY;AACZ,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAER,eADE;AAERU,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUY,UAAV,GAAuB;AACrB,QAAMvB,UAAU,CAACE,cAAD,EAAiBW,KAAjB,CAAhB;AACD;;AAED,UAAUW,WAAV,GAAwB;AACtB,QAAMxB,UAAU,CAACK,eAAD,EAAkBe,MAAlB,CAAhB;AACD;;AAED,UAAUK,WAAV,GAAwB;AACtB,QAAMzB,UAAU,CAACQ,eAAD,EAAkBc,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAM9B,GAAG,CAAC,CACRE,IAAI,CAACyB,UAAD,CADI,EAERzB,IAAI,CAAC0B,WAAD,CAFI,EAGR1B,IAAI,CAAC2B,WAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import axios from 'axios';\r\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS,\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // const result = yield call(logInAPI,action.data)\r\n    yield delay(1000);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI(data) {\r\n  return axios.post('/api/logout', data);\r\n}\r\n\r\nfunction* logOut(action) {\r\n  try {\r\n    // const result = yield call(logOutAPI,action.data)\r\n    yield delay(1000);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: LOG_OUT_SUCCESS,\r\n      // data:result.data\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction SignUpAPI(data) {\r\n  return axios.post('/api/signup', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    // const result = yield call(logOutAPI,action.data)\r\n    yield delay(1000);\r\n    yield put({ // put이 액션을 dispatch하는 역할과 빗슷하게 본다\r\n      type: SIGN_UP_SUCCESS,\r\n      // data:result.data\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}